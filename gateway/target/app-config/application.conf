akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  stdout-loglevel = "INFO"
  #logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  actor {
    provider = "cluster"
    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
      kuta = "com.kuta.akka.base.serialization.KutaSerializer"
    }
    serialization-bindings{
    	"java.io.Serializable" = java
    	"com.kuta.akka.base.serialization.KutaSerializable" = kuta
    }
    allow-java-serialization = on
    serizlize-messages = on
    deployment {
		default{
			virtual-nodes-factor = 30
		}
			"/*/hall-router" {
				router = akka.routing.ConsistentHashingGroup
				routees.paths = ["/user/game-root-actor"] 
				cluster {
					enabled = on
					allow-local-routees = off
					use-roles = ["game"]
				}
			}
		}
  }
  remote.artery {
	canonical
    {
      hostname = "192.168.2.100"
      port = 2552
    }
  }
  kuta-blocking-dispatcher {
	  type = Dispatcher
	  executor = "thread-pool-executor"
	  thread-pool-executor {
	    fixed-pool-size = 20000
	  }
	  throughput = 1
  }
  http {
     server {
        server-header = Taurus
        idle-timeout = 20 s
        max-connections = 65535
        pipelining-limit = 16
        backlog = 10240
     }
  }
  cluster {
    seed-nodes = [
      "akka://KSF@192.168.2.100:2552"]
      shutdown-after-unsuccessful-join-seed-nodes = 20s
      roles = [gateway]
  }
  coordinated-shutdown.terminate-actor-system = on
  
}